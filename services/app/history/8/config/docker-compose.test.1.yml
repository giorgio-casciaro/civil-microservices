version:              '3.2'

services:
  portainer:
    image: portainer/portainer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /data/portainer:/data
    ports:
       - target:    9000
         published: 9000
         protocol:  tcp
         mode:      host
    deploy:
     placement:
       constraints: [node.role == manager]
     endpoint_mode: dnsrr
     replicas: 1

  prometheus:
    deploy:
     placement:
       constraints: [node.role == manager]
     endpoint_mode: dnsrr
     replicas: 1
    image : prom/prometheus
    entrypoint: sh
    command:  -c "echo \"$$prometheus_config\" > /etc/prometheus/prometheus.yml; cat /etc/prometheus/prometheus.yml; /bin/prometheus -config.file=/etc/prometheus/prometheus.yml -storage.local.path=/prometheus -web.console.libraries=/usr/share/prometheus/console_libraries -web.console.templates=/usr/share/prometheus/consoles"
    ports:
       - target:    9090
         published: 9090
         protocol:  tcp
         mode:      host
    environment:
      prometheus_config: |-
        # my global config
        global:
          scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
          evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
          # scrape_timeout is set to the global default (10s).

          # Attach these labels to any time series or alerts when communicating with
          # external systems (federation, remote storage, Alertmanager).
          external_labels:
              monitor: 'codelab-monitor'

        # Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
        rule_files:
          # - "first.rules"
          # - "second.rules"

        # A scrape configuration containing exactly one endpoint to scrape:
        # Here it's Prometheus itself.
        scrape_configs:
          # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
          # - job_name: 'prometheus'
          #
          #   # metrics_path defaults to '/metrics'
          #   # scheme defaults to 'http'.
          #
          #   static_configs:
          #     - targets: ['172.18.0.1:9090']

          - job_name: 'docker'
                 # metrics_path defaults to '/metrics'
                 # scheme defaults to 'http'.

            static_configs:
              - targets: ['172.18.0.1:9323']


  app:
    image:            giorgiocasciaro/civil-microservices-app:8
    command:          sh -c "npm run start"
    environment:
      netHost:        app
      schemaHost:     'http://schema:10000'
      aerospikeHosts: aerospike:3000
      # netCors:        http://localhost:82,http://127.0.0.1:82,http://localhost:8080,http://127.0.0.1:8080,http://localhost:10080,http://127.0.0.1:10080
      NODE_ENV:       test
    networks:
      - microservicesNet
      - aerospike
    deploy:
     # placement:
     #   constraints: [node.role == manager]
    #  mode: global
     endpoint_mode: dnsrr
     replicas: 1

networks:
  microservicesNet:
    driver:           overlay
  aerospike:
    driver:           overlay
